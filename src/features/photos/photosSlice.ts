/* eslint-disable @typescript-eslint/no-unused-vars */
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { getRecentPhotos } from "./photosAPI";

const API_KEY = "8c920bfa4628a647b79c9a9d4594dbe7";
const API_SECRET = "9141f4123da2be92";
const per_page = 24;

export interface PhotosState {
  status: "idle" | "loading" | "failed";
  photos: any;
}

const initialState: PhotosState = {
  status: "idle",
  photos: {page: 0, photo: []},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const fetchRecentPhotosAsync = createAsyncThunk(
  "photos/fetchRecentPhotos",
  async (page: number | undefined) => {
    const response = await getRecentPhotos(API_KEY, per_page, page ? page : 1);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const photosSlice = createSlice({
  name: "photos",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchRecentPhotosAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchRecentPhotosAsync.fulfilled, (state, action) => {
        const newPhotos = {
          ...action.payload.photos,
          photo: [...state.photos.photo, ...action.payload.photos.photo]
        }
        state.status = "idle";
        state.photos = newPhotos
      });
  },
});

export const { increment } = photosSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPhotos = (state: RootState) => state.photos.photos;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default photosSlice.reducer;
