/* eslint-disable @typescript-eslint/no-unused-vars */
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { getRecentPhotos, getPhotoBySearchText } from "./photosAPI";

const API_KEY = "8c920bfa4628a647b79c9a9d4594dbe7";
const API_SECRET = "9141f4123da2be92";
const per_page = 24;

export enum photosApiStatus {
  IDLE = "IDLE",
  LOADING = "LOADING",
  FAILED = "FAILED",
}

export interface PhotosState {
  status: photosApiStatus;
  photos: any;
}

const initialState: PhotosState = {
  status: photosApiStatus.IDLE,
  photos: { page: 0, photo: [] },
};

export const fetchRecentPhotosAsync = createAsyncThunk(
  "photos/fetchRecentPhotos",
  async (page: number) => {
    const response = await getRecentPhotos(API_KEY, per_page, page);
    return response.data;
  }
);

export const fetchPhotoBySearchText = createAsyncThunk(
  "photos/fetchSearchedPhotos",
  async (action: any) => {
    const { page, searchText } = action;
    const response = await getPhotoBySearchText(
      API_KEY,
      per_page,
      page,
      searchText
    );
    return response.data;
  }
);

const getUniquePhoto = (state: any, action: any) => {
  const allPhoto = [...state.photos.photo, ...action.payload.photos.photo];
  const ids = allPhoto?.map((o) => o.id);
  const uniquePhoto = allPhoto.filter(
    ({ id }, index) => !ids.includes(id, index + 1)
  );
  return uniquePhoto;
};

export const photosSlice = createSlice({
  name: "photos",
  initialState,
  reducers: {
    someAction: (state, action) => {
      // Modify state here
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchRecentPhotosAsync.pending, (state) => {
        state.status = photosApiStatus.LOADING;
      })
      .addCase(fetchRecentPhotosAsync.fulfilled, (state, action) => {
        if (action.payload.stat === "fail") {
          state.status = photosApiStatus.FAILED;
          state.photos = { page: 0, photo: [] };
        } else {
          state.photos = {
            ...action.payload.photos,
            photo: getUniquePhoto(state, action),
          };
          state.status = photosApiStatus.IDLE;
        }
      })
      .addCase(fetchPhotoBySearchText.pending, (state) => {
        state.status = photosApiStatus.LOADING;
      })
      .addCase(fetchPhotoBySearchText.fulfilled, (state, action) => {
        if (action.payload.stat === "fail") {
          state.status = photosApiStatus.FAILED;
          state.photos = { page: 0, photo: [] };
        } else {
          if (action.payload.photos.page === 1) {
            state.photos = {
              ...action.payload.photos,
              photo: action.payload.photos.photo
            };
          } else {
            state.photos = {
              ...action.payload.photos,
              photo: getUniquePhoto(state, action),
            };
          }
          
          state.status = photosApiStatus.IDLE;
        }
      });
  },
});

// export const { someAction } = photosSlice.actions;

export const selectPhotos = (state: RootState) => state.photos.photos;
export const selectStatus = (state: RootState) => state.photos.status;

export default photosSlice.reducer;
